p <- add_markers(p, color = ~Species)
p
# or use pipes
p <- plot_ly(iris, x=~x, y=~y, z=~z) %>%
add_markers(p, color = ~Species)
p
# or use pipes
p <- plot_ly(iris, x=~x, y=~y, z=~z) %>%
add_markers(p, color = ~Species)
p
# add labels to the plot
variables <-names(iris)
layout(p, scene = list(xaxis = list(title = variables[1]),
yaxis = list(title = variables[2]),
zaxis = list(title = variables[3])))
rm(list= ls())
# load iris dataset
data("iris")
head(iris)
# create vectors for plots
x <- iris$Sepal.Length
y <- iris$Petal.Length
z <- iris$Sepal.Width
library("plot3D")
###################### Exercise 1: 3-D plots #######################
scatter3D(x, y, z, clab = c("Sepal", "Width (cm)"))
###################### Exercise 1: 3-D plots #######################
scatter3D(x, y, z, clab = c("Sepal", "Width (cm)"))
# remove color bar
scatter3D(x, y, z, colkey = F)
capabilities("tcltk")
# change the style
# colvar: color of the points
# col: color the points
# pch: point shape
# cex: size of the points
scatter3D(x,y,z, colvar = NULL, col = "blue", pch=19, cex=0.9)
# full box
scatter3D(x,y,z, bty = "f", colkey = F, main="bty=f")
# grey background with white grid lines and tick numbers
scatter3D(x,y,z, bty="g", colkey = F, main="bty=g", ticktype="detailed")
# full box
scatter3D(x,y,z, bty = "f", colkey = F, main="bty=f")
# grey background with white grid lines and tick numbers
scatter3D(x,y,z, bty="g", colkey = F, main="bty=g", ticktype="detailed")
# User defined
scatter3D(x,y,z, pch=18, bty="u", colkey=F, main="bty=u", col.panel="royalblue", expand=0.4, col.grid="linen")
library(dplyr)
library(threejs)
############### EXERCISE 2 ###########
scatterplot3js(x,y,z, color = rainbow(length(z)))
library(shiny)
ui <- fluidPage(
numericInput(inputId = "n", "Sample size", value=25),
plotOutput(outputId = "hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$n))
})
}
# RUNNING APP
shinyApp(ui = ui, server = server)
# Exercise 5
library(shiny)
library(rgl)
#library(plot3D)
library(car)
data("iris")
data("iris")
# creating vectors for plots
x <- iris$Sepal.Length
y <- iris$Petal.Length
z <- iris$Sepal.Width
ui <- fluidPage(
rglwidgetOutput("plot", width = 800, height = 600)
)
server <- function(input, output) {
output$plot <- renderRglwidget({
open3d(useNULL = T)
scatter3D(x,y,z,groups=iris$Species,
col= as.numeric(iris$Species), surface=F)
rglwidget()
})
}
# RUNNING APP
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$plot <- renderRglwidget({
open3d(useNULL = T)
scatter3d(x,y,z,groups=iris$Species,
col= as.numeric(iris$Species), surface=F)
rglwidget()
})
}
# RUNNING APP
shinyApp(ui = ui, server = server)
library(shiny)
set.seed(100)
runApp('Documents/UC/Semester 3/Labs/AR_VR/week3/Exercise6')
runApp('Documents/UC/Semester 3/Labs/AR_VR/week3/Exercise7')
runApp('Documents/UC/Semester 3/Labs/AR_VR/week3/Exercise7')
runApp('Documents/UC/Semester 3/Labs/AR_VR/week3/Exercise6')
runApp('Documents/UC/Semester 3/Labs/AR_VR/week3/take_home')
runApp('Documents/UC/Semester 3/Labs/AR_VR/week3/take_home')
runApp('Documents/UC/Semester 3/Labs/AR_VR/week3/take_home')
colnames(iris)
runApp('Documents/UC/Semester 3/Labs/AR_VR/week3/take_home')
runApp('Documents/UC/Semester 3/Labs/AR_VR/week3/Exercise7')
# Load the dataset
data(trees)
# Calculate average and variance of Volume
average_volume <- mean(trees$Volume, na.rm = TRUE)
variance_volume <- var(trees$Volume, na.rm = TRUE)
# Print the results
cat("Average =", round(average_volume, 2), "and Variance =", round(variance_volume, 2))
cor(trees$Girth, trees$Height)
cor(trees$Height, trees$Girth)
lm(trees$Height ~ trees$Girth)
model <- lm(trees$Height ~ trees$Girth)
summary(model)
?lm()
model <- lm(trees$Girth ~ trees$Height)
summary(model)
round(-6.18839, 2)
# Fit a linear regression model
linear_model <- lm(Girth ~ Height, data = trees)
# Calculate intercept, slope, R-squared
intercept <- coef(linear_model)[1]
slope <- coef(linear_model)[2]
r_squared <- summary(linear_model)$r.squared
# Predict the value for the last tree
last_tree <- tail(trees, n = 1)
predicted_value <- predict(linear_model, newdata = last_tree)
residual <- last_tree$Girth - predicted_value
# Print the results
cat("Intercept estimate:", round(intercept, 2), "\n")
cat("Slope estimate:", round(slope, 2), "\n")
cat("R-squared value:", round(r_squared, 2), "\n")
cat("Predicted value for the last tree:", round(predicted_value, 2), "\n")
cat("Residual for the last tree:", round(residual, 2))
head(trees, n=1)
first_tree <- head(trees, n=1)
pv <- predict(linear_model, newdata = last_tree)
pv
model <- lm(trees$Girth ~ trees$Height)
predict(model)
head(trees, n=1)
tail(trees, n=1)
20.6-16.061605
# install devtools, not needed if already installed
install.packages("devtools")
# install aframer and arframer
devtools::install_github("JohnCoene/aframer") # select option 3 (none)
# load libraries
library(aframer)
library(arframer)
devtools::install_github("JohnCoene/arframer") # select option 3 (none)
# load libraries
library(aframer)
library(arframer)
# it creates the scenes in html code
embed_aframe(
a_scene(
a_dependency(),
a_box(position = "-1 0.5 -3", rotation = "0 45 0", color = "#4CC3D9"),
a_sphere(position = "0 1.25 -5", radius = "1.25", color = "#EF2D5E"),
a_cylinder(position = "1 0.75 -3", radius = "0.5", height = "1.5", color = "#FFC65D"),
a_plane(position = "0 0 -4", rotation = "-90 0 0", width = "4", height = "4", color = "#7BC8A4"),
a_sky(color="#ECECEC")
)
)
# it runs the scene in web browser
browse_aframe(
a_scene(
a_dependency(),
a_box(position = "-1 0.5 -3", rotation = "0 45 0", color = "#4CC3D9"),
a_sphere(position = "0 1.25 -5", radius = "1.25", color = "#EF2D5E"),
a_cylinder(position = "1 0.75 -3", radius = "0.5", height = "1.5", color = "#FFC65D"),
a_plane(position = "0 0 -4", rotation = "-90 0 0", width = "4", height = "4", color = "#7BC8A4"),
a_sky(color="#ECECEC")
)
)
data("swiss")
str(swiss)
correlation <- cor(swiss$Fertility, swiss$Agriculture)
cat("Correlation coefficient between Fertility and Agriculture:", round(correlation, 3))
# Get the coefficients of the model
intercept <- round(coef(lm_model)[1], 3)
source("~/.active-rstudio-document")
summary(lm_model)
standardized_residual
# Calculate the standardized residual for province #37
standardized_residual <- round(rstandard(lm_model)[37], 3)
standardized_residual
resid(lm_model)[37]
std_err
# Calculate the standard error for regression
std_error <- round(summary(lm_model)$sigma, 3)
std_err
std_error
# Load the swiss dataset
data(swiss)
# Fit a linear model
lm_model <- lm(Fertility ~ Agriculture + Education + Infant.Mortality, data = swiss)
# Get the coefficients of the model
intercept <- round(coef(lm_model)[1], 2)
agriculture_coeff <- round(coef(lm_model)[2], 2)
education_coeff <- round(coef(lm_model)[3], 2)
infant_mortality_coeff <- round(coef(lm_model)[4], 2)
# Calculate the adjusted R-squared
adjusted_r_squared <- round(summary(lm_model)$adj.r.squared, 2)
# Define the values for prediction
agriculture_value <- 36.7
education_value <- 8
infant_mortality_value <- 25.6
# Predict Fertility for the given values
predicted_value <- predict(lm_model, newdata = data.frame(Agriculture = agriculture_value, Education = education_value, Infant.Mortality = infant_mortality_value))
# Calculate the 90% prediction interval
prediction_interval <- predict(lm_model, newdata = data.frame(Agriculture = agriculture_value, Education = education_value, Infant.Mortality = infant_mortality_value), interval = "prediction")
# Calculate the F-statistic and p-value for the nested F-test
anova_result <- anova(lm_model)
f_value <- round(anova_result$`F value`[2], 2)
p_value <- format(pchisq(anova_result$`F value`[2], df1 = 2, df2 = nrow(swiss) - length(coef(lm_model))), scientific = TRUE, digits = 2)
source("~/.active-rstudio-document")
# Load the swiss dataset
data(swiss)
# Fit a linear model
lm_model <- lm(Fertility ~ Agriculture + Education + Infant.Mortality, data = swiss)
# Print the coefficients of the model
coefficients(lm_model)
# Print the coefficients of the model
coefficients(lm_model)
coefficients <- coef(lm_model)
# Round the coefficients to two decimal places
coefficients <- round(coefficients, 2)
# Extract the individual coefficients
intercept <- coefficients[1]
agriculture_coeff <- coefficients[2]
education_coeff <- coefficients[3]
infant_mortality_coeff <- coefficients[4]
# Print the fitted equation
cat("The fitted equation of the regression is:\n")
cat("Predicted_Fertility =", intercept, "+", agriculture_coeff, "Agriculture +", education_coeff, "Education +", infant_mortality_coeff, "Infant.Mortality\n")
# Calculate the adjusted R-squared value
adjusted_r_squared <- summary(lm_model)$adj.r.squared
# Define the values for prediction
new_data <- data.frame(
Agriculture = 36.7,
Education = 8,
Infant.Mortality = 25.6
)
# Calculate the 90% prediction interval
prediction_interval <- predict(lm_model, newdata = new_data, interval = "prediction", level = 0.90)
# Extract the lower and upper bounds of the prediction interval
lower_bound <- prediction_interval[1]
upper_bound <- prediction_interval[2]
# Print the adjusted R-squared and the prediction interval
cat("The adjusted R-squared value of the regression is:", round(adjusted_r_squared, 2), "\n")
cat("A 90% prediction interval for a province with Agriculture = 36.7, Education = 8, and Infant.Mortality = 25.6 is (", round(lower_bound, 2), ",", round(upper_bound, 2), ")\n")
# Calculate the adjusted R-squared value
adjusted_r_squared <- summary(lm_model)$adj.r.squared
# Define the values for prediction
new_data <- data.frame(
Agriculture = 36.7,
Education = 8,
Infant.Mortality = 25.6
)
# Calculate the 90% prediction interval
prediction_interval <- predict(lm_model, newdata = new_data, interval = "prediction", level = 0.90)
# Extract the lower and upper bounds of the prediction interval
lower_bound <- prediction_interval[1]
upper_bound <- prediction_interval[2]
# Print the adjusted R-squared and the prediction interval
cat("The adjusted R-squared value of the regression is:", round(adjusted_r_squared, 2), "\n")
cat("A 90% prediction interval for a province with Agriculture = 36.7, Education = 8, and Infant.Mortality = 25.6 is (", round(lower_bound, 2), ",", round(upper_bound, 2), ")\n")
# Calculate the adjusted R-squared value
adjusted_r_squared <- summary(lm_model)$adj.r.squared
# Define the values for prediction
new_data <- data.frame(
Agriculture = 36.7,
Education = 8,
Infant.Mortality = 25.6
)
# Calculate the 90% prediction interval
prediction_interval <- predict(lm_model, newdata = new_data, interval = "prediction", level = 0.90)
# Extract the lower and upper bounds of the prediction interval
lower_bound <- prediction_interval[1]
upper_bound <- prediction_interval[2]
# Print the adjusted R-squared and the prediction interval
cat("The adjusted R-squared value of the regression is:", round(adjusted_r_squared, 2), "\n")
cat("A 90% prediction interval for a province with Agriculture = 36.7, Education = 8, and Infant.Mortality = 25.6 is (", round(lower_bound, 2), ",", round(upper_bound, 2), ")\n")
Finally, use a nested F-test to test if Agriculture and Education are jointly significant. Its F value is
and p value is
full_model <- lm(Fertility ~ Agriculture + Education + Infant.Mortality, data = swiss)
# Fit a reduced model without Agriculture and Education
reduced_model <- lm(Fertility ~ Infant.Mortality, data = swiss)
# Perform the nested F-test
nested_f_test <- anova(reduced_model, full_model)
# Extract the F value and p value
f_value <- nested_f_test$`F value`[2]
p_value <- nested_f_test$`Pr(>F)`[2]
# Print the F value and p value
cat("The nested F-test F value is:", round(f_value, 2), "and p value is", format(p_value, scientific = TRUE, digits = 2), "\n")
full_model <- lm(Fertility ~ Agriculture + Education + Infant.Mortality, data = swiss)
# Fit a reduced model without Agriculture and Education
reduced_model <- lm(Fertility ~ Infant.Mortality, data = swiss)
# Perform the nested F-test
nested_f_test <- anova(reduced_model, full_model)
# Extract the F value and p value
f_value <- nested_f_test$`F value`[2]
p_value <- nested_f_test$`Pr(>F)`[2]
# Print the F value and p value
cat("The nested F-test F value is:", round(f_value, 2), "and p value is", format(p_value, scientific = TRUE, digits = 2), "\n")
# Determine whether to reject the null hypothesis
alpha <- 0.05  # significance level
if (p_value < alpha) {
cat("We reject H0: beta_Agriculture = beta_Education = 0\n")
cat("We conclude that Agriculture and Education are jointly significant.\n")
} else {
cat("We do not reject H0: beta_Agriculture = beta_Education = 0\n")
cat("There is not enough evidence to conclude that Agriculture and Education are jointly significant.\n")
}
# Print the F value and p value
cat("The nested F-test F value is:", round(f_value, 2), "and p value is", format(p_value, scientific = TRUE, digits = 2), "\n")
# Extract the F value and p value
f_value <- nested_f_test$`F value`[2]
p_value <- nested_f_test$`Pr(>F)`[2]
# Print the F value and p value
cat("The nested F-test F value is:", round(f_value, 2), "and p value is", format(p_value, scientific = TRUE, digits = 2), "\n")
f_value
p_value
prediction_interval
lower_bound
upper_bound
# Extract the lower and upper bounds of the prediction interval
lower_bound <- prediction_interval[2]
lower_bound
upper_bound <- prediction_interval[3]
upper_bound
round(lower_bound, 2)
round(upper_bound, 2)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("ACEMS/r2vr")
library(r2vr)
## Define the elements of your scene
box <- a_entity(.tag = "box", position = c(-1, 0.5, -3), rotaion = c(0, 45, 0), color = "#4CC3D9",
shadow = "")
sphere <- a_entity(.tag = "sphere", position = c(0, 1.25, -5), radius = 1.25, color = "#EF2D5E",
shadow = "")
cylinder <- a_entity(.tag = "cylinder", position = c(1, 0.75, -3), radius = 0.5, height = 1.5, color = "#FFC65D",
shadow = "")
plane <- a_entity(.tag = "plane", position = c(0, 0, -4), rotation = c(-90, 0, 0), width = 4,
height = 4, color = "#7BC8A4", shadow = "")
text <- a_label(text = "*** This is done in R ***", position = c(0, 2.5, -2), color = "#F92CEF",
font = "mozillavr")
sky <- a_entity(.tag = "sky", color = "#ECECEC")
# put everything together
hello_world_scene <- a_scene(.template = "empty",
.children = list(box, sphere, cylinder, plane,
text, sky))
# Serve a scene
hello_world_scene$serve()
# View local web content within RStudio
rstudioapi::viewer("http://127.0.0.1:8080")
# Shift + Click to open it in your web browser
# http://127.0.0.1:8080
# Stop serving a scene
hello_world_scene$stop()
box <- a_entity(.tag = "box", position = c(-1, 0.5, -3), rotaion = c(0, 45, 0), color = "#4CC3D9", shadow = "")
sphere <- a_entity(.tag = "sphere", position = c(0, 1.25, -5), radius = 1.25, color = "#EF2D5E", shadow = "")
cylinder <- a_entity(.tag = "cylinder", position = c(1, 0.75, -3), radius = 0.5, height = 1.5, color = "#FFC65D", shadow = "")
plane <- a_entity(.tag = "plane", position = c(0, 0, -4), rotation = c(-90, 0, 0), width = 4,
height = 4, color = "#7BC8A4", shadow = "")
text <- a_label(text = "*** This is done in R ***", position = c(0, 2.5, -2), color = "#F92CEF",
font = "mozillavr")
sky <- a_entity(.tag = "sky", color = "#ECECEC")
# put everything together
hello_world_scene <- a_scene(.template = "empty", .children = list(box, sphere, cylinder, plane, text, sky))
# Serve a scene
hello_world_scene$serve()
# View local web content within RStudio
rstudioapi::viewer("http://127.0.0.1:8080")
# Shift + Click to open it in your web browser
# http://127.0.0.1:8080
# Stop serving a scene
hello_world_scene$stop()
setwd("/Users/prahladpanthi/Documents/UC/Semester 3/Labs/AR_VR/week9")
library(r2vr)
library(jsonlite)
library(ggplot2)
a_scatterplot <- function(json_data, x, y, z, ...){
## js sources for scatterplot
.scatter_source <- "https://cdn.rawgit.com/zcanter/aframe-scatterplot/master/dist/a-scatterplot.min.js"
.d3_source <- "https://cdnjs.cloudflare.com/ajax/libs/d3/4.4.1/d3.min.js"
## Create in-memory asset for JSON data
## A regular a_asset could be used that points to a real file
## this is necessary in a vignette to avoid CRAN issues.
json_file_asset <- a_in_mem_asset(id = "scatterdata",
src = "./scatter_data.json",
.data = json_data)
a_entity(.tag = "scatterplot",
src = json_file_asset,
.js_sources = list(.scatter_source, .d3_source),
x = x,
y = y,
z = z, ...)
} # end of function
# convert the dataset into a JSON file
diamonds_json <- jsonlite::toJSON(diamonds)
# create scene
my_scene <- a_scene(.template = "empty",
.children = list(
a_scatterplot(diamonds_json, # dataset
x = "depth", y = "carat", z = "table", # choose columns in your dataset
val = "price", # colour scale
xlabel = "depth", ylabel = "carat", zlabel = "table", #axis labels
showFloor = TRUE,
ycage = TRUE,
title = "Price of Diamonds in Dollars $$$",
pointsize = "10", # try different values
position = c(0, 0, -2),
scale = c(3,3,3)),
a_pc_control_camera()))
# Serve a scene
my_scene$serve()
# Shift + Click to open it in your web browser
# http://127.0.0.1:8080
# Stop serving a scene
my_scene$stop()
library(r2vr)
library(jsonlite)
library(ggplot2)
a_scatterplot <- function(json_data, x, y, z, ...){
## js sources for scatterplot
.scatter_source <- "https://cdn.rawgit.com/zcanter/aframe-scatterplot/master/dist/a-scatterplot.min.js"
.d3_source <- "https://cdnjs.cloudflare.com/ajax/libs/d3/4.4.1/d3.min.js"
## Create in-memory asset for JSON data
## A regular a_asset could be used that points to a real file
## this is necessary in a vignette to avoid CRAN issues.
json_file_asset <- a_in_mem_asset(id = "scatterdata",
src = "./scatter_data.json",
.data = json_data)
a_entity(.tag = "scatterplot",
src = json_file_asset,
.js_sources = list(.scatter_source, .d3_source),
x = x,
y = y,
z = z, ...)
} # end of function
# convert the dataset into a JSON file
diamonds_json <- jsonlite::toJSON(diamonds)
# create scene
my_scene <- a_scene(.template = "empty",
.children = list(
a_scatterplot(diamonds_json, # dataset
x = "depth", y = "carat", z = "table", # choose columns in your dataset
val = "price", # colour scale
xlabel = "depth", ylabel = "carat", zlabel = "table", #axis labels
showFloor = TRUE,
ycage = TRUE,
title = "Price of Diamonds in Dollars $$$",
pointsize = "10", # try different values
position = c(0, 0, -2),
scale = c(3,3,3)),
a_pc_control_camera()))
# Serve a scene
my_scene$serve()
# Shift + Click to open it in your web browser
# http://127.0.0.1:8080
# Stop serving a scene
my_scene$stop()
library(r2vr)
library(jsonlite)
library(ggplot2)
a_scatterplot <- function(json_data, x, y, z, ...){
## js sources for scatterplot
.scatter_source <- "https://cdn.rawgit.com/zcanter/aframe-scatterplot/master/dist/a-scatterplot.min.js"
.d3_source <- "https://cdnjs.cloudflare.com/ajax/libs/d3/4.4.1/d3.min.js"
## Create in-memory asset for JSON data
## A regular a_asset could be used that points to a real file
## this is necessary in a vignette to avoid CRAN issues.
json_file_asset <- a_in_mem_asset(id = "scatterdata",
src = "./scatter_data.json",
.data = json_data)
a_entity(.tag = "scatterplot",
src = json_file_asset,
.js_sources = list(.scatter_source, .d3_source),
x = x,
y = y,
z = z, ...)
} # end of function
# convert the dataset into a JSON file
diamonds_json <- jsonlite::toJSON(diamonds)
# create scene
my_scene <- a_scene(.template = "empty",
.children = list(
a_scatterplot(diamonds_json, # dataset
x = "depth", y = "carat", z = "table", # choose columns in your dataset
val = "price", # colour scale
xlabel = "depth", ylabel = "carat", zlabel = "table", #axis labels
showFloor = TRUE,
ycage = TRUE,
title = "Price of Diamonds in Dollars $$$",
pointsize = "10", # try different values
position = c(0, 0, -2),
scale = c(3,3,3)),
a_pc_control_camera()))
# Serve a scene
my_scene$serve()
rstudioapi::viewer("http://127.0.0.1:8080")
