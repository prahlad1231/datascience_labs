sphere_position_z <- df$variable_3
target_values <- df$target
# Define a color palette based on target values
color_palette <- c("red", "green", "blue", "yellow")
# Create an empty list to store a_sphere elements
sphere_elements <- list()
# Loop through each observation and create a separate a_sphere element
for (i in 1:length(sphere_position_x)) {
sphere_element <- a_sphere(
position = paste(sphere_position_x[i], sphere_position_y[i], sphere_position_z[i], sep = " "),
radius = "0.3",
color = color_palette[target_values[i]]
)
sphere_elements <- c(sphere_elements, list(sphere_element))
}
# Create an A-Frame scene with all a_sphere elements
aframe_scene <- a_scene(
a_dependency(),
sphere_elements,
a_sky(color = "#ECECEC")
)
# Render the A-Frame scene
embed_aframe(aframe_scene)
# Create a list of JSON objects
json_list <- lapply(1:nrow(df), function(i) {
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[df[i, "target"]], '"}', sep = ""
)
return(json_obj)
})
# Create a list of JSON objects
json_list <- lapply(1:nrow(df), function(i) {
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[df[i, "target"]], '"}', sep = ""
)
return(json_obj)
})
# Define a color palette based on target values
color_palette <- c("#FF5733", "#33FF57", "#3366FF", "#FF33E1")
# Create an empty list to store a_sphere elements
sphere_elements <- list()
# Loop through each observation and create a separate a_sphere element
for (i in 1:length(sphere_position_x)) {
sphere_element <- a_sphere(
position = paste(sphere_position_x[i], sphere_position_y[i], sphere_position_z[i], sep = " "),
radius = "0.3",
color = color_palette[target_values[i]]
)
sphere_elements <- c(sphere_elements, list(sphere_element))
}
# Create an A-Frame scene with all a_sphere elements
aframe_scene <- a_scene(
a_dependency(),
sphere_elements,
a_sky(color = "#ECECEC")
)
# Render the A-Frame scene
embed_aframe(aframe_scene)
# Create a list of JSON objects
json_list <- lapply(1:nrow(df), function(i) {
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[df[i, "target"]], '"}', sep = ""
)
return(json_obj)
})
#loading libraries
library(tidyverse)
library(tidyr)
library(ggplot2)
library(plotly)
# Load the data
df <- data.frame(
Month = c("January","Feburary", "March","April", "May", "June", "July", "August", "September", "October", "November", "December"),
Direct_Sales = c(88.2, 76.3, 47.8, 76.1, 71.4, 58.6, 79.9, 69.4, 53.9, 80.8, 74.3, 46.4),
Indirect_Sales = c(82.2, 71.4, 88.7, 81.0, 88.4, 120.2, 83.5, 73.8, 98.0, 85.1, 94.4, 64.8)
)
# Reshape the data into long format
library(tidyr)
df_long <- pivot_longer(df, cols = -Month, names_to = "Sales_Type", values_to = "Sales_Value")
# Create a ggplot bar chart showing both Direct Sales and Indirect Sales side by side
bar_graph <- ggplot(df_long, aes(x = factor(Month, levels = unique(Month)), y = Sales_Value, fill = Sales_Type)) +
geom_col(position = "dodge", width = 0.8) +
geom_hline(yintercept = 90, linetype = "dotted", color = "red") +
labs(
title = "Sales required to Close the Deal",
x = "Months of Year 2019",
y = "Sales achieved"
) +
theme_classic()+
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
) +
scale_y_continuous(breaks = seq(0, max(df$Direct_Sales, df$Indirect_Sales), by = 20))+
scale_fill_manual(values = c("Direct_Sales" = "#40E0D0", "Indirect_Sales" = "#008080"))
interactive_bargraph <- ggplotly(bar_graph)
interactive_bargraph
# Create a ggplot bar chart showing both Direct Sales and Indirect Sales side by side
bar_graph <- ggplot(df_long, aes(x = factor(Month, levels = unique(Month)), y = Sales_Value, fill = Sales_Type)) +
geom_col(position = "dodge", width = 0.8) +
geom_hline(yintercept = 90, linetype = "dotted", color = "red") +
labs(
title = "Sales required to Close the Deal",
x = "Months of Year 2019",
y = "Sales achieved"
) +
theme_classic()+
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
) +
scale_y_continuous(breaks = seq(0, max(df$Direct_Sales, df$Indirect_Sales), by = 20))+
scale_fill_manual(values = c("Direct_Sales" = "red", "Indirect_Sales" = "pink"))
interactive_bargraph <- ggplotly(bar_graph)
interactive_bargraph
# Create a ggplot bar chart showing both Direct Sales and Indirect Sales side by side
bar_graph <- ggplot(df_long, aes(x = factor(Month, levels = unique(Month)), y = Sales_Value, fill = Sales_Type)) +
geom_col(position = "dodge", width = 0.8) +
geom_hline(yintercept = 90, linetype = "dotted", color = "blue") +
labs(
title = "Sales required to Close the Deal",
x = "Months of Year 2019",
y = "Sales achieved"
) +
theme_classic()+
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
) +
scale_y_continuous(breaks = seq(0, max(df$Direct_Sales, df$Indirect_Sales), by = 20))+
scale_fill_manual(values = c("Direct_Sales" = "red", "Indirect_Sales" = "pink"))
# Create a ggplot bar chart showing both Direct Sales and Indirect Sales side by side
bar_graph <- ggplot(df_long, aes(x = factor(Month, levels = unique(Month)), y = Sales_Value, fill = Sales_Type)) +
geom_col(position = "dodge", width = 0.8) +
geom_hline(yintercept = 90, linetype = "dotted", color = "red") +
labs(
title = "Sales required to Close the Deal",
x = "Months of Year 2019",
y = "Sales achieved"
) +
theme_classic()+
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
) +
scale_y_continuous(breaks = seq(0, max(df$Direct_Sales, df$Indirect_Sales), by = 20))+
scale_fill_manual(values = c("Direct_Sales" = "blue", "Indirect_Sales" = "skyblue"))
interactive_bargraph <- ggplotly(bar_graph)
interactive_bargraph
View(df)
# Load the necessary packages
library(tidyverse)
library(tidyr)
library(ggplot2)
library(plotly)
library(aframer)
df <- read.csv("dataset_aframe.csv")
head(df)
df <- df %>%
group_by(target) %>%
select(c(variable_1, variable_2, variable_3))
head(df)
# Extract values from the dfset
sphere_position_x <- df$variable_1
sphere_position_y <- df$variable_2
sphere_position_z <- df$variable_3
target_values <- df$target
# Define a color palette based on target values
color_palette <- c("#FF5733", "#33FF57", "#3366FF", "#FF33E1")
# Create an empty list to store a_sphere elements
sphere_elements <- list()
# Loop through each observation and create a separate a_sphere element
for (i in 1:length(sphere_position_x)) {
sphere_element <- a_sphere(
position = paste(sphere_position_x[i], sphere_position_y[i], sphere_position_z[i], sep = " "),
radius = "0.3",
color = color_palette[target_values[i]]
)
sphere_elements <- c(sphere_elements, list(sphere_element))
}
# Create an A-Frame scene with all a_sphere elements
aframe_scene <- a_scene(
a_dependency(),
sphere_elements,
a_sky(color = "#ECECEC")
)
# Render the A-Frame scene
embed_aframe(aframe_scene)
# Create a list of JSON objects
json_list <- lapply(1:nrow(df), function(i) {
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[df[i, "target"]], '"}', sep = ""
)
return(json_obj)
})
View(df)
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[as.numeric(df[i, "target"])s], '"}', sep = ""
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[as.numeric(df[i, "target"])], '"}', sep = ""
)
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[as.numeric(df[i, "target"])], '"}', sep = ""
)
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[as.numeric(df[i, "target"])], '"}', sep = ""
)
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[as.numeric(df[i, "target"])], '"}', sep = ""
)
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[as.numeric(df[i, "target"])], '"}', sep = ""
)
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[as.numeric(df[i, "target"])], '"}', sep = ""
)
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[as.numeric(df[i, "target"])], '"}', sep = ""
)
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[as.numeric(df[i, "target"])], '"}', sep = ""
)
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[as.numeric(df[i, "target"])], '"}', sep = ""
)
return(json_obj)
# Create a list of JSON objects
json_list <- lapply(1:nrow(df), function(i) {
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[as.numeric(df[i, "target"])], '"}', sep = ""
)
return(json_obj)
})
# Combine the JSON objects into a single string with line breaks
json_df <- paste(json_list, collapse = ",\n")
json_df <- paste("[\n", json_df, "\n]", sep = "")
# Remove line breaks and whitespace from the JSON string
cleaned_json_df <- gsub("\\s+", "", json_df)
# Print the cleaned JSON df
cat(cleaned_json_df)
writeLines(cleaned_json_df, "output.json")
# Create a 3D scatter plot using Plotly
scatter_plot <- plot_ly(df, x = ~variable_1, y = ~variable_2, z = ~variable_3, color = ~target) %>%
add_markers(marker = list(size = 3, opacity = 0.7)) %>%
layout(scene = list(xaxis = list(title = "Variable 1"), yaxis = list(title = "Variable 2"), zaxis = list(title = "Variable 3")))
# Create a 3D scatter plot using Plotly
scatter_plot <- plot_ly(df, x = ~variable_1, y = ~variable_2, z = ~variable_3, color = ~target, type = "scatter3d") %>%
add_markers(marker = list(size = 3, opacity = 0.7)) %>%
layout(scene = list(xaxis = list(title = "Variable 1"), yaxis = list(title = "Variable 2"), zaxis = list(title = "Variable 3"))
)
# Display the scatter plot
scatter_plot
# Load the necessary packages
library(tidyverse)
library(tidyr)
library(ggplot2)
library(plotly)
library(aframer)
df <- read.csv("dataset_aframe.csv")
head(df)
df <- df %>%
group_by(target) %>%
select(c(variable_1, variable_2, variable_3))
head(df)
# Extract values from the dfset
sphere_position_x <- df$variable_1
sphere_position_y <- df$variable_2
sphere_position_z <- df$variable_3
target_values <- df$target
# Define a color palette based on target values
color_palette <- c("red", "green", "blue", "yellow")
# Create an empty list to store a_sphere elements
sphere_elements <- list()
# Loop through each observation and create a separate a_sphere element
for (i in 1:length(sphere_position_x)) {
sphere_element <- a_sphere(
position = paste(sphere_position_x[i], sphere_position_y[i], sphere_position_z[i], sep = " "),
radius = "0.3",
color = color_palette[target_values[i]]
)
sphere_elements <- c(sphere_elements, list(sphere_element))
}
# Create an A-Frame scene with all a_sphere elements
aframe_scene <- a_scene(
a_dependency(),
sphere_elements,
a_sky(color = "#ECECEC")
)
# Render the A-Frame scene
embed_aframe(aframe_scene)
# Create a list of JSON objects
json_list <- lapply(1:nrow(df), function(i) {
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[as.numeric(df[i, "target"])], '"}', sep = ""
)
return(json_obj)
})
# Combine the JSON objects into a single string with line breaks
json_df <- paste(json_list, collapse = ",\n")
json_df <- paste("[\n", json_df, "\n]", sep = "")
# Remove line breaks and whitespace from the JSON string
cleaned_json_df <- gsub("\\s+", "", json_df)
# Print the cleaned JSON df
cat(cleaned_json_df)
writeLines(cleaned_json_df, "output.json")
# Create a 3D scatter plot using Plotly
scatter_plot <- plot_ly(df, x = ~variable_1, y = ~variable_2, z = ~variable_3, color = ~target) %>%
add_markers(marker = list(size = 3, opacity = 0.7)) %>%
layout(scene = list(xaxis = list(title = "Variable 1"), yaxis = list(title = "Variable 2"), zaxis = list(title = "Variable 3")))
# Create a 3D scatter plot using Plotly
scatter_plot <- plot_ly(df, x = ~variable_1, y = ~variable_2, z = ~variable_3, color = ~target, type = "scatter3d") %>%
add_markers(marker = list(size = 3, opacity = 0.7)) %>%
layout(scene = list(xaxis = list(title = "Variable 1"), yaxis = list(title = "Variable 2"), zaxis = list(title = "Variable 3"))
)
# Display the scatter plot
scatter_plot
# Load the necessary packages
library(tidyverse)
library(tidyr)
library(ggplot2)
library(plotly)
library(aframer)
df <- read.csv("dataset_aframe.csv")
head(df)
# grouping the dataframe by target values i.e. 1 to 4
df <- df %>%
group_by(target) %>%
select(c(variable_1, variable_2, variable_3))
head(df)
# Extract values from the dfset
sphere_position_x <- df$variable_1
sphere_position_y <- df$variable_2
sphere_position_z <- df$variable_3
target_values <- df$target
# Define a color palette based on target values
color_palette <- c("red", "green", "blue", "yellow")
# Create a list of JSON objects
json_list <- lapply(1:nrow(df), function(i) {
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[as.numeric(df[i, "target"])], '"}', sep = ""
)
return(json_obj)
})
# Combine the JSON objects into a single string with line breaks
json_df <- paste(json_list, collapse = ",\n")
json_df <- paste("[\n", json_df, "\n]", sep = "")
# Remove line breaks and white space from the JSON string
cleaned_json_df <- gsub("\\s+", "", json_df)
writeLines(cleaned_json_df, "PrahladPanthi_u3248319_Q5_output.json")
# reading the file "ds_shinyapp.csv"
ds_shinyapp <- read.csv("dataset_shinyapp.csv")
# Loading necessary libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(htmltools)
# Defining the UI
ui <- fluidPage(
titlePanel("Final Assessment - Prahlad Panthi (u3248319)"), # setting the title of the panel
sidebarLayout( # creating a sidebar in the window
sidebarPanel(
checkboxGroupInput("categories", "Select Categories:",
choices = c("HIGH_HAND", "HIGH_LEG", "LOW_HAND", "LOW_LEG"),
selected = "HIGH_HAND"), # setting up the checkboxes with different choices in the sidebar
hr(),
# creating a slider input for experiment id with values ranging from 60 to 100 and initially selecting the complete range
sliderInput("experiment_id", "Select Experiment IDs:", min = 60, max = 100, value = c(60, 100)),
# creating a slider input for HIGH_HAND with values ranging from 6 to 10 and initially selecting the complete range
sliderInput("HIGH_HAND_range", "Select range for HIGH_HAND:", min = 6, max = 10, value = c(6, 10)),
# creating a slider input for HIGH_LEG with values ranging from 7 to 10 and initially selecting the complete range
sliderInput("HIGH_LEG_range", "Select range for HIGH_LEG:", min = 7, max = 10, value = c(7, 10)),
# creating a slider input for LOW_HAND with values ranging from 1 to 6 and initially selecting the complete range
sliderInput("LOW_HAND_range", "Select range for LOW_HAND:", min = 1, max = 6, value = c(1, 6)),
# creating a slider input for LOW_LEG with values ranging from 1 to 7 and initially selecting the complete range
sliderInput("LOW_LEG_range", "Select range for LOW_LEG:", min = 1, max = 7, value = c(1, 7))
),
mainPanel(
plotOutput("boxplot"), # boxplot id is used for displaying the plot output
textOutput("summary") # summary id is used for displaying the summary
)
)
)
server <- function(input, output) {
# Creating a reactive expression to filter data based on user input
filteredData <- reactive({
data_filtered <- ds_shinyapp[ds_shinyapp$Experiment_ID %in% input$experiment_id & # making sure that the experiment id from dataset is in the experiment id selected by the user
# making sure that the values of HIGH_HAND from the dataset is between the selected range by the user
ds_shinyapp$HIGH_HAND >= input$HIGH_HAND_range[1] & ds_shinyapp$HIGH_HAND <= input$HIGH_HAND_range[2] &
# making sure that the values of HIGH_LEG from the dataset is between the selected range by the user
ds_shinyapp$HIGH_LEG >= input$HIGH_LEG_range[1] & ds_shinyapp$HIGH_LEG <= input$HIGH_LEG_range[2] &
# making sure that the values of LOW_HAND from the dataset is between the selected range by the user
ds_shinyapp$LOW_HAND >= input$LOW_HAND_range[1] & ds_shinyapp$LOW_HAND <= input$LOW_HAND_range[2] &
# making sure that the values of LOW_LEG from the dataset is between the selected range by the user
ds_shinyapp$LOW_LEG >= input$LOW_LEG_range[1] & ds_shinyapp$LOW_LEG <= input$LOW_LEG_range[2], ]
return(data_filtered)
})
# creating the output for box plot
output$boxplot <- renderPlot({
ggplot(filteredData() %>% pivot_longer(cols = c(input$categories), names_to = "category", values_to = "value"),
aes(x = category, y = value, fill = category)) +
geom_boxplot() +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = 0.5) +
scale_fill_manual(values = c("red", "green", "blue", "orange")) +
theme_minimal() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line.x = element_line(color = "black", size = 0.5),
axis.line.y = element_line(color = "black", size = 0.5)
)
})
# Creating the summary for the output
output$summary <- renderText({
categories_to_summary <- input$categories
if (length(categories_to_summary) == 0) {
return(NULL)
}
summary_data <- filteredData()
result <- "Statistics:"
for (category in categories_to_summary) {
category_data <- summary_data[, category]
mean_val <- mean(category_data)
sd_val <- sd(category_data)
result <- paste(result, category, "Average:", mean_val, "SD:", sd_val, sep = "\n")
}
return(result)
})
}
shinyApp(ui = ui, server = server)
# loading the necessary libraries
library(ggplot2)
library(tidyr)
# creating the data frame from given table
df <- data.frame(
Research_centre = c("ALL", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M"),
'2015' = paste0(c(7.20, 2.50, 10.70, 9.20, 8.30, 7.90, 8.70, 3.70, 8.40, 5.10, 6.40, 9.20, 9.90, 5.60), "%"),
'2016' = paste0(c(7.60, 3.00, 11.40, 9.70, 8.60, 8.20, 9.10, 4.00, 8.80, 5.60, 6.80, 9.70, 10.20, 6.00), "%"),
'2017' = paste0(c(8.00, 3.40, 11.90, 10.20, 9.00, 8.50, 9.60, 4.30, 9.20, 6.00, 7.10, 10.10, 11.00, 6.20), "%"),
'2018' = paste0(c(8.10, 3.70, 12.00, 10.40, 9.10, 10.10, 9.60, 4.50, 9.50, 6.20, 7.20, 10.20, 11.10, 6.30), "%"),
'2019' = paste0(c(8.60, 4.40, 12.50, 10.90, 9.50, 11.30, 10.10, 5.00, 10.00, 6.70, 7.60, 10.50, 11.60, 6.70), "%")
)
head(df)
long_df <- gather(df, key = "Year", value = "Value", -Research_centre)
head(long_df)
########################################################################################################################
# Creating the bar plot
long_df$Value <- as.numeric(gsub("%", "", long_df$Value))  # Convert Value to numeric and remove "%" symbol
# Create a custom rainbow color palette
rainbow_colors <- rainbow(length(unique(long_df$Research_centre)))
# Create a named vector to map Research_centre to colors
color_mapping <- setNames(rainbow_colors, unique(long_df$Research_centre))
ggplot(long_df, aes(x = Year, y = Value, color = Research_centre, group = Research_centre)) +
geom_line() +
labs(title = "Research Centre Data",
x = "Year",
y = "Value") +
scale_color_manual(values = color_mapping) +
scale_y_continuous(limits = c(0, 14), breaks = seq(0, 14, by = 2), labels = paste0(seq(0, 14, by = 2), "%")) +
scale_x_discrete(labels = function(x) gsub("X", "", x)) +  # Remove "X" prefix from x-axis labels
theme(legend.position = "bottom", legend.title = element_blank())
# Load the necessary packages
library(tidyverse)
library(tidyr)
library(ggplot2)
library(plotly)
library(aframer)
df <- read.csv("dataset_aframe.csv")
head(df)
# grouping the dataframe by target values i.e. 1 to 4
df <- df %>%
group_by(target) %>%
select(c(variable_1, variable_2, variable_3))
head(df)
# Define a color palette based on target values
color_palette <- c("red", "green", "blue", "yellow")
# Create a list of JSON objects
json_list <- lapply(1:nrow(df), function(i) {
json_obj <- paste(
'{"x": ', df[i, "variable_1"], ', "y": ', df[i, "variable_2"], ', "z": ', df[i, "variable_3"],
', "size": 1, "color": "', color_palette[as.numeric(df[i, "target"])], '"}', sep = ""
)
return(json_obj)
})
# Combine the JSON objects into a single string with line breaks
json_df <- paste(json_list, collapse = ",\n")
json_df <- paste("[\n", json_df, "\n]", sep = "")
# Remove line breaks and white space from the JSON string
cleaned_json_df <- gsub("\\s+", "", json_df)
writeLines(cleaned_json_df, "PrahladPanthi_u3248319_Q5_output.json")
