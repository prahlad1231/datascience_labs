# Load the dataset
data(trees)
# Calculate average and variance of Volume
average_volume <- mean(trees$Volume, na.rm = TRUE)
variance_volume <- var(trees$Volume, na.rm = TRUE)
# Print the results
cat("Average =", round(average_volume, 2), "and Variance =", round(variance_volume, 2))
cor(trees$Girth, trees$Height)
cor(trees$Height, trees$Girth)
lm(trees$Height ~ trees$Girth)
model <- lm(trees$Height ~ trees$Girth)
summary(model)
?lm()
model <- lm(trees$Girth ~ trees$Height)
summary(model)
round(-6.18839, 2)
# Fit a linear regression model
linear_model <- lm(Girth ~ Height, data = trees)
# Calculate intercept, slope, R-squared
intercept <- coef(linear_model)[1]
slope <- coef(linear_model)[2]
r_squared <- summary(linear_model)$r.squared
# Predict the value for the last tree
last_tree <- tail(trees, n = 1)
predicted_value <- predict(linear_model, newdata = last_tree)
residual <- last_tree$Girth - predicted_value
# Print the results
cat("Intercept estimate:", round(intercept, 2), "\n")
cat("Slope estimate:", round(slope, 2), "\n")
cat("R-squared value:", round(r_squared, 2), "\n")
cat("Predicted value for the last tree:", round(predicted_value, 2), "\n")
cat("Residual for the last tree:", round(residual, 2))
head(trees, n=1)
first_tree <- head(trees, n=1)
pv <- predict(linear_model, newdata = last_tree)
pv
model <- lm(trees$Girth ~ trees$Height)
predict(model)
head(trees, n=1)
tail(trees, n=1)
20.6-16.061605
# install devtools, not needed if already installed
install.packages("devtools")
# install aframer and arframer
devtools::install_github("JohnCoene/aframer") # select option 3 (none)
# load libraries
library(aframer)
library(arframer)
devtools::install_github("JohnCoene/arframer") # select option 3 (none)
# load libraries
library(aframer)
library(arframer)
# it creates the scenes in html code
embed_aframe(
a_scene(
a_dependency(),
a_box(position = "-1 0.5 -3", rotation = "0 45 0", color = "#4CC3D9"),
a_sphere(position = "0 1.25 -5", radius = "1.25", color = "#EF2D5E"),
a_cylinder(position = "1 0.75 -3", radius = "0.5", height = "1.5", color = "#FFC65D"),
a_plane(position = "0 0 -4", rotation = "-90 0 0", width = "4", height = "4", color = "#7BC8A4"),
a_sky(color="#ECECEC")
)
)
# it runs the scene in web browser
browse_aframe(
a_scene(
a_dependency(),
a_box(position = "-1 0.5 -3", rotation = "0 45 0", color = "#4CC3D9"),
a_sphere(position = "0 1.25 -5", radius = "1.25", color = "#EF2D5E"),
a_cylinder(position = "1 0.75 -3", radius = "0.5", height = "1.5", color = "#FFC65D"),
a_plane(position = "0 0 -4", rotation = "-90 0 0", width = "4", height = "4", color = "#7BC8A4"),
a_sky(color="#ECECEC")
)
)
data("swiss")
str(swiss)
correlation <- cor(swiss$Fertility, swiss$Agriculture)
cat("Correlation coefficient between Fertility and Agriculture:", round(correlation, 3))
# Get the coefficients of the model
intercept <- round(coef(lm_model)[1], 3)
source("~/.active-rstudio-document")
summary(lm_model)
standardized_residual
# Calculate the standardized residual for province #37
standardized_residual <- round(rstandard(lm_model)[37], 3)
standardized_residual
resid(lm_model)[37]
std_err
# Calculate the standard error for regression
std_error <- round(summary(lm_model)$sigma, 3)
std_err
std_error
# Load the swiss dataset
data(swiss)
# Fit a linear model
lm_model <- lm(Fertility ~ Agriculture + Education + Infant.Mortality, data = swiss)
# Get the coefficients of the model
intercept <- round(coef(lm_model)[1], 2)
agriculture_coeff <- round(coef(lm_model)[2], 2)
education_coeff <- round(coef(lm_model)[3], 2)
infant_mortality_coeff <- round(coef(lm_model)[4], 2)
# Calculate the adjusted R-squared
adjusted_r_squared <- round(summary(lm_model)$adj.r.squared, 2)
# Define the values for prediction
agriculture_value <- 36.7
education_value <- 8
infant_mortality_value <- 25.6
# Predict Fertility for the given values
predicted_value <- predict(lm_model, newdata = data.frame(Agriculture = agriculture_value, Education = education_value, Infant.Mortality = infant_mortality_value))
# Calculate the 90% prediction interval
prediction_interval <- predict(lm_model, newdata = data.frame(Agriculture = agriculture_value, Education = education_value, Infant.Mortality = infant_mortality_value), interval = "prediction")
# Calculate the F-statistic and p-value for the nested F-test
anova_result <- anova(lm_model)
f_value <- round(anova_result$`F value`[2], 2)
p_value <- format(pchisq(anova_result$`F value`[2], df1 = 2, df2 = nrow(swiss) - length(coef(lm_model))), scientific = TRUE, digits = 2)
source("~/.active-rstudio-document")
# Load the swiss dataset
data(swiss)
# Fit a linear model
lm_model <- lm(Fertility ~ Agriculture + Education + Infant.Mortality, data = swiss)
# Print the coefficients of the model
coefficients(lm_model)
# Print the coefficients of the model
coefficients(lm_model)
coefficients <- coef(lm_model)
# Round the coefficients to two decimal places
coefficients <- round(coefficients, 2)
# Extract the individual coefficients
intercept <- coefficients[1]
agriculture_coeff <- coefficients[2]
education_coeff <- coefficients[3]
infant_mortality_coeff <- coefficients[4]
# Print the fitted equation
cat("The fitted equation of the regression is:\n")
cat("Predicted_Fertility =", intercept, "+", agriculture_coeff, "Agriculture +", education_coeff, "Education +", infant_mortality_coeff, "Infant.Mortality\n")
# Calculate the adjusted R-squared value
adjusted_r_squared <- summary(lm_model)$adj.r.squared
# Define the values for prediction
new_data <- data.frame(
Agriculture = 36.7,
Education = 8,
Infant.Mortality = 25.6
)
# Calculate the 90% prediction interval
prediction_interval <- predict(lm_model, newdata = new_data, interval = "prediction", level = 0.90)
# Extract the lower and upper bounds of the prediction interval
lower_bound <- prediction_interval[1]
upper_bound <- prediction_interval[2]
# Print the adjusted R-squared and the prediction interval
cat("The adjusted R-squared value of the regression is:", round(adjusted_r_squared, 2), "\n")
cat("A 90% prediction interval for a province with Agriculture = 36.7, Education = 8, and Infant.Mortality = 25.6 is (", round(lower_bound, 2), ",", round(upper_bound, 2), ")\n")
# Calculate the adjusted R-squared value
adjusted_r_squared <- summary(lm_model)$adj.r.squared
# Define the values for prediction
new_data <- data.frame(
Agriculture = 36.7,
Education = 8,
Infant.Mortality = 25.6
)
# Calculate the 90% prediction interval
prediction_interval <- predict(lm_model, newdata = new_data, interval = "prediction", level = 0.90)
# Extract the lower and upper bounds of the prediction interval
lower_bound <- prediction_interval[1]
upper_bound <- prediction_interval[2]
# Print the adjusted R-squared and the prediction interval
cat("The adjusted R-squared value of the regression is:", round(adjusted_r_squared, 2), "\n")
cat("A 90% prediction interval for a province with Agriculture = 36.7, Education = 8, and Infant.Mortality = 25.6 is (", round(lower_bound, 2), ",", round(upper_bound, 2), ")\n")
# Calculate the adjusted R-squared value
adjusted_r_squared <- summary(lm_model)$adj.r.squared
# Define the values for prediction
new_data <- data.frame(
Agriculture = 36.7,
Education = 8,
Infant.Mortality = 25.6
)
# Calculate the 90% prediction interval
prediction_interval <- predict(lm_model, newdata = new_data, interval = "prediction", level = 0.90)
# Extract the lower and upper bounds of the prediction interval
lower_bound <- prediction_interval[1]
upper_bound <- prediction_interval[2]
# Print the adjusted R-squared and the prediction interval
cat("The adjusted R-squared value of the regression is:", round(adjusted_r_squared, 2), "\n")
cat("A 90% prediction interval for a province with Agriculture = 36.7, Education = 8, and Infant.Mortality = 25.6 is (", round(lower_bound, 2), ",", round(upper_bound, 2), ")\n")
Finally, use a nested F-test to test if Agriculture and Education are jointly significant. Its F value is
and p value is
full_model <- lm(Fertility ~ Agriculture + Education + Infant.Mortality, data = swiss)
# Fit a reduced model without Agriculture and Education
reduced_model <- lm(Fertility ~ Infant.Mortality, data = swiss)
# Perform the nested F-test
nested_f_test <- anova(reduced_model, full_model)
# Extract the F value and p value
f_value <- nested_f_test$`F value`[2]
p_value <- nested_f_test$`Pr(>F)`[2]
# Print the F value and p value
cat("The nested F-test F value is:", round(f_value, 2), "and p value is", format(p_value, scientific = TRUE, digits = 2), "\n")
full_model <- lm(Fertility ~ Agriculture + Education + Infant.Mortality, data = swiss)
# Fit a reduced model without Agriculture and Education
reduced_model <- lm(Fertility ~ Infant.Mortality, data = swiss)
# Perform the nested F-test
nested_f_test <- anova(reduced_model, full_model)
# Extract the F value and p value
f_value <- nested_f_test$`F value`[2]
p_value <- nested_f_test$`Pr(>F)`[2]
# Print the F value and p value
cat("The nested F-test F value is:", round(f_value, 2), "and p value is", format(p_value, scientific = TRUE, digits = 2), "\n")
# Determine whether to reject the null hypothesis
alpha <- 0.05  # significance level
if (p_value < alpha) {
cat("We reject H0: beta_Agriculture = beta_Education = 0\n")
cat("We conclude that Agriculture and Education are jointly significant.\n")
} else {
cat("We do not reject H0: beta_Agriculture = beta_Education = 0\n")
cat("There is not enough evidence to conclude that Agriculture and Education are jointly significant.\n")
}
# Print the F value and p value
cat("The nested F-test F value is:", round(f_value, 2), "and p value is", format(p_value, scientific = TRUE, digits = 2), "\n")
# Extract the F value and p value
f_value <- nested_f_test$`F value`[2]
p_value <- nested_f_test$`Pr(>F)`[2]
# Print the F value and p value
cat("The nested F-test F value is:", round(f_value, 2), "and p value is", format(p_value, scientific = TRUE, digits = 2), "\n")
f_value
p_value
prediction_interval
lower_bound
upper_bound
# Extract the lower and upper bounds of the prediction interval
lower_bound <- prediction_interval[2]
lower_bound
upper_bound <- prediction_interval[3]
upper_bound
round(lower_bound, 2)
round(upper_bound, 2)
setwd("/Users/prahladpanthi/Documents/UC/Semester 3/Labs/AR_VR/assignment")
library(rvest)
library(tidyverse)
library(stringr)
library(caret)
library(dplyr)
library(glmnet)
library(explore)
require(tcltk)
library(ggplot2)
#Loading the data in R
df <- read.csv("ds_salaries.csv")
#df_1 <- read.csv("ds_salaries.csv")
typeof(df)
head(df)
class(df)
#we can see we have 3755 Rows, and 11 columns.
summary(df)
#lets check the NA values
colSums(is.na(df))
#printing the number of unique values for each categorical variable
categorical <- c("experience_level", "employment_type", "job_title", "employee_residence", "company_location", "company_size")
for (i in categorical) {
cat(paste("Unique values in", i, ":", paste(unique(df[[i]]), collapse = ", "), "\n\n"))
}
cat("\nNumber of unique values in Categorical variables:\n")
#counting and printing the number of unique values for each categorical variable
unique_counts <- sapply(df[categorical], function(x) length(unique(x)))
cat(paste(names(unique_counts), ":", unique_counts, "\n"))
#lets see the correlation
# Assuming ds_salaries is your data frame
# First, load the corrplot package if you haven't already
# Sample data with categorical variables
#data <- data.frame(
#experience_level = c("EN", "MI", "SE", "EX", "SE", "MI"),
# employment_type = c("FT", "CT", "FL", "PT", "FT", "CT"),
#company_size = c("L", "S", "M", "L", "S", "M")
#)
#converting experience_level to numeric
df$experience_level_numeric <- as.numeric(factor(df$experience_level, levels = c("EN", "MI", "SE", "EX")))
#converting employment_type to numeric
df$employment_type_numeric <- as.numeric(factor(df$employment_type, levels = c("FT", "CT", "FL", "PT")))
#converting company_size to numeric
df$company_size_numeric <- as.numeric(factor(df$company_size, levels = c("L","M","S")))
# Create a mapping of the original category labels to their numeric labels
company_size_mapping <- data.frame(
Category_Label = c("S", "M", "L"),
Numeric_Label = as.numeric(factor(c("S", "M", "L"), levels = c("S", "M", "L")))
)
# Loop through each category and print the mapping
for (category in c("S", "M", "L")) {
cat("Numeric label of '", category, "' in company_size: ", company_size_mapping$Numeric_Label[company_size_mapping$Category_Label == category], "\n")
}
# Create a mapping of the original category labels to their numeric labels for experience_level
experience_level_mapping <- data.frame(
Category_Label = c("EN", "MI", "SE", "EX"),
Numeric_Label = as.numeric(factor(c("EN", "MI", "SE", "EX"), levels = c("EN", "MI", "SE", "EX"))
)
)
#Print the mapping for experience_level
for (category in c("EN", "MI", "SE", "EX")) {
cat("Numeric label of '", category, "' in experience_level: ", experience_level_mapping$Numeric_Label[experience_level_mapping$Category_Label == category], "\n")
}
# Create a mapping of the original category labels to their numeric labels for employment_type
employment_type_mapping <- data.frame(
Category_Label = c("FT", "CT", "FL", "PT"),
Numeric_Label = as.numeric(factor(c("FT", "CT", "FL", "PT"), levels = c("FT", "CT", "FL", "PT"))
)
)
# Print the mapping for employment_type
for (category in c("FT", "CT", "FL", "PT")) {
cat("Numeric label of '", category, "' in employment_type: ", employment_type_mapping$Numeric_Label[employment_type_mapping$Category_Label == category], "\n")
}
#viewing the resulting data frame
head(df)
colnames(df)
# Drop columns "column1" and "column2"
df_2 <- df %>%
select(-company_size, -employment_type,-experience_level,-job_title,-employee_residence,-company_location,-salary_currency)
head(df_2)
install.packages("corrplot")
library(corrplot)
# Load the corrplot package
library(corrplot)
# Create a correlation matrix (example data)
correlation_matrix <- cor(df_2)
library(corrplot)
# Create a correlation matrix (example data)
correlation_matrix <- cor(df_2)
# Create a correlation plot with values
corrplot(correlation_matrix, method = "number")
#DataExplorer::create_report(df)
dim(df)
dim(df_2)
#Summary
#The DataSet contains 3755 rows and 7 columns. Initially we had 11 columns but as there were alot of
#categorical variables  in job_title, employee_residence and company_location dropped them. and we converted experience_level
#employment_type, company_size
#unique(df$experience_level_numeric)
'Experience Level:
"EN" (Entry-level / Junior)-1
"MI" (Mid-level / Intermediate)-2
"SE" (Senior-level / Expert)-3
"EX" (Executive-level / Director)-4
Employment Type:
"FT" (Full-time)-1
"CT" (Contract)-2
"FL" (Freelance)-3
"PT" (Part-time)-4
Company Size:
"L" (More than 250 employees - Large)-3
"M" (50 to 250 employees - Medium)-2
"S" (Less than 50 employees - Small)-1'
# Renaming values in the "experience_level" column using direct assignment
#df_2$experience_level[df_2$experience_level == "EN"] <- "Entry-Level/Junior"
#df_2$experience_level[df_2$experience_level == "MI"] <- "Mid-level/Intermediate"
#df_2$experience_level[df_2$experience_level == "SE"] <- "Senior-level/Expert"
#df_2$experience_level[df_2$experience_level == "EX"] <- "Executive-level/Director"
# Create a countplot
ggplot(data = df, aes(x = experience_level)) +
geom_bar() +
labs(title = 'Experience Levels of Data Science Jobs',
x = 'Experience Level',
y = 'Count') +
theme_minimal() +
theme(plot.title = element_text(size = 18, hjust = 0.5),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
)
# Reorder "job_title" based on count
df$job_title <- factor(df$job_title, levels = names(sort(table(df$job_title), decreasing = TRUE)))
# Filter the data to keep only the top 10 categories
df <- df[df$job_title %in% levels(df$job_title)[1:10], ]
# Create the bar chart
ggplot(df, aes(x = job_title)) +
geom_bar() +
geom_text(aes(label = ..count..), stat = 'count', vjust = -0.5, size = 5, hjust = 1) + # Print count labels
labs(title = 'Top 10 Job Titles in Data Science',
x = 'Job Titles',
y = 'Count') +
theme_minimal() +
theme(plot.title = element_text(size = 20, face = 'bold'),
axis.title.x = element_text(size = 15, face = 'bold'),
axis.title.y = element_text(size = 15, face = 'bold'),
axis.text.y = element_text(size = 12)) + # Adjust label size
coord_flip()
# Rename values in the "employment_type" column using direct assignment
df$employment_type[df$employment_type == "PT"] <- "Part-time"
df$employment_type[df$employment_type == "FT"] <- "Full-time"
df$employment_type[df$employment_type == "CT"] <- "Contract"
df$employment_type[df$employment_type == "FL"] <- "Freelance"
# Load the ggplot2 package
library(ggplot2)
# Load the ggplot2 package if not already loaded
library(ggplot2)
# Create a bar plot with labels
p <- ggplot(counts_df, aes(x = employment_type, y = count, label = count)) +
geom_col(fill = "#0072B2", width = 0.6) + # Custom color and width
geom_text(vjust = -0.5, size = 6, color = "black", fontface = "bold") + # Adjust label size and style
labs(title = 'Employment Type of Data Science Jobs',
x = 'Employment Type',
y = 'Count') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.5, face = "bold"), # Adjust title size and style
axis.title.x = element_text(size = 16, face = "bold"), # Adjust x-axis label size and style
axis.title.y = element_text(size = 16, face = "bold"), # Adjust y-axis label size and style
axis.text.x = element_text(size = 12, angle = 45, hjust = 1), # Rotate x-axis labels for readability
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
panel.border = element_blank(), # Remove border around the plot
panel.background = element_blank() # Remove background color
)
print(p)
# Load the dplyr package if not already loaded
library(dplyr)
# Use the mutate function to replace values in the company_size column
df_1 <- df_1 %>%
mutate(company_size = case_when(
company_size == "S" ~ "Small(<50)",
company_size == "M" ~ "Medium(50-250)",
company_size == "L" ~ "Large(>250)",
TRUE ~ company_size
))
#Company Size
ggplot(df_1, aes(x = company_size)) +
geom_bar() +
labs(title = 'Company Size', x = 'Company Size', y = 'Count') +
theme_minimal() +
theme(plot.title = element_text(size = 18, face = "bold")) +
geom_text(stat = 'count', aes(label = after_stat(count), vjust = -0.5), size = 4) +
coord_flip()
# Create the countplot
ggplot(df, aes(x = work_year)) +
geom_bar() +
labs(title = "Work Year", x = "Work Year", y = "Count") +
theme_minimal() +
theme(plot.title = element_text(size = 18, face = "bold")) +
geom_text(stat = 'count', aes(label = after_stat(count), vjust = -0.5), size = 6)
# Create a bar plot with labels
p <- ggplot(counts_df, aes(x = employment_type, y = count, label = count)) +
geom_col(fill = "#0072B2", width = 0.6) + # Custom color and width
geom_text(vjust = -0.5, size = 6, color = "black", fontface = "bold") + # Adjust label size and style
labs(title = 'Employment Type of Data Science Jobs',
x = 'Employment Type',
y = 'Count') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.5, face = "bold"), # Adjust title size and style
axis.title.x = element_text(size = 16, face = "bold"), # Adjust x-axis label size and style
axis.title.y = element_text(size = 16, face = "bold"), # Adjust y-axis label size and style
axis.text.x = element_text(size = 12, angle = 45, hjust = 1), # Rotate x-axis labels for readability
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
panel.border = element_blank(), # Remove border around the plot
panel.background = element_blank() # Remove background color
)
print(p)
# Filter the data to keep only the top 10 categories
df <- df[df$job_title %in% levels(df$job_title)[1:10], ]
# Create the bar chart
ggplot(df, aes(x = job_title)) +
geom_bar() +
geom_text(aes(label = ..count..), stat = 'count', vjust = -0.5, size = 5, hjust = 1) + # Print count labels
labs(title = 'Top 10 Job Titles in Data Science',
x = 'Job Titles',
y = 'Count') +
theme_minimal() +
theme(plot.title = element_text(size = 20, face = 'bold'),
axis.title.x = element_text(size = 15, face = 'bold'),
axis.title.y = element_text(size = 15, face = 'bold'),
axis.text.y = element_text(size = 12)) + # Adjust label size
coord_flip()
# Rename values in the "employment_type" column using direct assignment
df$employment_type[df$employment_type == "PT"] <- "Part-time"
df$employment_type[df$employment_type == "FT"] <- "Full-time"
df$employment_type[df$employment_type == "CT"] <- "Contract"
df$employment_type[df$employment_type == "FL"] <- "Freelance"
# Load the ggplot2 package
library(ggplot2)
# Load the ggplot2 package if not already loaded
library(ggplot2)
# Create a bar plot with labels
p <- ggplot(counts_df, aes(x = employment_type, y = count, label = count)) +
geom_col(fill = "#0072B2", width = 0.6) + # Custom color and width
geom_text(vjust = -0.5, size = 6, color = "black", fontface = "bold") + # Adjust label size and style
labs(title = 'Employment Type of Data Science Jobs',
x = 'Employment Type',
y = 'Count') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.5, face = "bold"), # Adjust title size and style
axis.title.x = element_text(size = 16, face = "bold"), # Adjust x-axis label size and style
axis.title.y = element_text(size = 16, face = "bold"), # Adjust y-axis label size and style
axis.text.x = element_text(size = 12, angle = 45, hjust = 1), # Rotate x-axis labels for readability
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
panel.border = element_blank(), # Remove border around the plot
panel.background = element_blank() # Remove background color
)
# Create a bar plot with labels
p <- ggplot(df, aes(x = employment_type, y = count, label = count)) +
geom_col(fill = "#0072B2", width = 0.6) + # Custom color and width
geom_text(vjust = -0.5, size = 6, color = "black", fontface = "bold") + # Adjust label size and style
labs(title = 'Employment Type of Data Science Jobs',
x = 'Employment Type',
y = 'Count') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.5, face = "bold"), # Adjust title size and style
axis.title.x = element_text(size = 16, face = "bold"), # Adjust x-axis label size and style
axis.title.y = element_text(size = 16, face = "bold"), # Adjust y-axis label size and style
axis.text.x = element_text(size = 12, angle = 45, hjust = 1), # Rotate x-axis labels for readability
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
panel.border = element_blank(), # Remove border around the plot
panel.background = element_blank() # Remove background color
)
print(p)
