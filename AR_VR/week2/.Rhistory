library("plot3D")
library("plot3D")
library("plot3D")
# Exercise 1: 3-D plots
scatter3D(x, y, z, clab = c("Sepal", "Width (cm)"))
# load iris dataset
data("iris")
head(iris)
# create vectors for plots
x <- iris$Sepal.Length
y <- iris$Petal.Length
z <- iris$Sepal.Width
# Exercise 1: 3-D plots
scatter3D(x, y, z, clab = c("Sepal", "Width (cm)"))
# remove color bar
scatter3D(x, y, z, colkey = F)
# change the style
scatter3D(x,y,z, colvar = NULL)
# change the style
scatter3D(x,y,z, colvar = NULL, col = "blue")
# change the style
scatter3D(x,y,z, colvar = NULL, col = "blue", pch=19)
# change the style
scatter3D(x,y,z, colvar = NULL, col = "blue", pch=19, cex=0.9)
# full box
scatter3D(x,y,z, bty = "f", colkey = F, main="bty=f")
# grey background with white grid lines and tick numbers
scatter3D(x,y,z, bty="g", colkey = F, main="bty=g", ticktype="detailed")
# User defined
scatter3D(x,y,z, pch=18, bty="u", colkey=F, main="bty=u", col.panel="royalblue", expand=0.4, col.grid="linen")
################## 3D plots with threejs ################
install.packages("threejs")
install.packages("dplyr")
library(dplyr)
library(threejs)
############### EXERCISE 2 ###########
scatterplot3js(x,y,z, color = rainbow(length(z)))
# changing the style of the data point
scatterplot3js(x,y,z, color = heat.colors(length(z)))
# specifying color for each type of iris
N = length(levels(iris$Species))
scatterplot3js(x,y,z, size = 0.6, color = rainbow(N)[iris$Species])
# change the style of data point
scatterplot3js(x,y,z, pch="o", color = rainbow(length(z)))
# complex graphs: network analysis or population analysis using the maps package
data("ego")
graphjs(ego, bg="black")
head(ego)
colnames(ego)
# using globejs() to plot population in the 500 largest cities in the world
install.packages("maps")
data(world.cities, package = "maps")
cities <- world.cities[order(world.cities$pop, decreasing = T)[1:500],]
value <- 100 * cities$pop / max(cities$pop)
globejs(bg = "white",
lat = cities$lat,
long = cities$long,
value = value,
rorationlat = -0.34,
rotationlong = -0.38,
fov = 30)
globejs(bg = "white",
lat = cities$lat,
long = cities$long,
value = value,
rorationlat = -0.54,
rotationlong = -0.38,
fov = 30)
globejs(bg = "white",
lat = cities$lat,
long = cities$long,
value = value,
rorationlat = -0.34,
rotationlong = -0.38,
fov = 30)
# 3D plots with rgl
install.packages("rgl")
library(rgl)
############## EXERCISE 3 ##############
plot3d(x,y,z)
# add color to the data points and increase size
plot3d(x,y,z,
size = 7,
col = as.numeric(iris$Species))
# changing the style of data point using type parameter
plot3d(x,y,z, type = "s", size = 2, col = as.numeric(iris$Species))
# add labels
plot3d(x,y,z, type = "s", size = 2, col = as.numeric(iris$Species),
xlab = "Sepal Length",
ylab = "Sepal Width",
zlab = "Petal Length")
# creating an animated 3d scatterplot chart
# static chart
plot3d(x,y,z, col = as.numeric(iris$Species), type = "s", radius = .2)
# indicate the axis and the rotation velocity
play3d(spin3d(axis = c(0,1,0), rpm = 20), duration = 10)
# indicate the axis and the rotation velocity
play3d(spin3d(axis = c(0,1,0), rpm = 20), duration = 10)
# indicate the axis and the rotation velocity
play3d(spin3d(axis = c(0,1,0), rpm = 50), duration = 10)
# indicate the axis and the rotation velocity
play3d(spin3d(axis = c(0,1,0), rpm = 100), duration = 10)
# to save a gif file, use movie3d() function
movie3d(movie = "3DAnimatedScatterPlot",
spin3d(axis = c(0,0,1), rpm = 7),
duration = 5,
dir = getwd(),
type = "gif",
clean = T)
# to save a gif file, use movie3d() function
movie3d(movie = "3DAnimatedScatterPlot",
spin3d(axis = c(0,0,1), rpm = 7),
duration = 5,
dir = getwd(),
type = "gif",
clean = TRUE)
# to save a gif file, use movie3d() function
# first install the magick package to run movie3d
install.packages("magick")
library(magick)
movie3d(movie = "3DAnimatedScatterPlot",
spin3d(axis = c(0,0,1), rpm = 7),
duration = 5,
dir = getwd(),
type = "gif",
clean = TRUE)
setwd("/Users/prahladpanthi/Documents/UC/Semester 3/Labs/AR_VR/week2")
# flights dataset
data("flights")
# combine the destination coordinates with a precision of two decimals in a single variable
flights$combined_destination <- sprintf("%.2f:%.2f", flights$dest_lat, flights$dest_long)
head(flights)
# obtain the total number of filghts that arrived at each airport
arrived_at_each_airport <- table(flights$combined_destination)
head(arrived_at_each_airport)
View(arrived_at_each_airport)
# order the variable in descending order
arrived_at_each_airport <- arrived_at_each_airport[order(arrived_at_each_airport, decreasing = T)]
View(arrived_at_each_airport)
# get the top ten airports
top_ten <- arrived_at_each_airport[1:10]
View(top_ten)
# get the top ten airports
top_ten <- arrived_at_each_airport[1:10]
View(top_ten)
# now obtain the origin information (lat, lon) of the flights that travelled to the top 10 destinations
top_ten_airports <- names(top_ten)
top_ten_airports
View(top_ten)
top_10_flights <- subset(flights, combined_destination %in% top_ten_airports)
View(top_10_flights)
# create a data frame that includes the origin and destination of all the flights to the top 10 destinations
colnames(flights)
top_10_flights <- top_10_flights[, 1:4]
View(top_10_flights)
# plot the data to visualize results
globejs(arcs = top_10_flights,
arcsColor = "green",
arcsLwd = 1,
arcsOpacity = 0.7,
atmosphere = TRUE)
# plot the data to visualize results
globejs(arcs = top_10_flights,
arcsColor = "green",
arcsLwd = 1,
arcsOpacity = 0.7,
atmosphere = F)
# plot the data to visualize results
globejs(arcs = top_10_flights,
arcsColor = "green",
arcsLwd = 1,
arcsOpacity = 0.7,
atmosphere = T)
# plot the data to visualize results
globejs(arcs = top_10_flights,
arcsColor = "green",
arcsLwd = 2,
arcsOpacity = 0.7,
atmosphere = T)
# plot the data to visualize results
globejs(arcs = top_10_flights,
arcsColor = "green",
arcsLwd = 12,
arcsOpacity = 0.7,
atmosphere = T)
# plot the data to visualize results
globejs(arcs = top_10_flights,
arcsColor = "green",
arcsLwd = 2,
arcsOpacity = 0.7,
atmosphere = T)
movie3d(movie = "3DAnimatedScatterPlot",
spin3d(axis = c(0,0,1), rpm = 7),
duration = 5,
dir = getwd(),
type = "gif",
clean = TRUE)
snapshot3d()
